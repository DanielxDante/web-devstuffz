/* CSS Rules */
/* When there's no confilict, Last Declaration Wins and Declarations Merge */
/* Inheritance: When applying a CSS rule to a parent, all children will have the CSS rule applied too */
/* When there is conflict, Most Specific Selector Combination Wins
      From most specific to least specific:
            - Inline CSS [style = ""]
            - ID
            - Class, Pseudo-class, Attribute
            - Number of elements [Child Selector & Descendant Selector]
*/

/* Adding !important will override all specificity rules */
header {
  text-align: center !important;
}

.Section1 {
  font-family: Arial, Helvetica, sans-serif;
  color: #346751;
  font-style: italic;
  font-weight: bold;
  /* font-size has 3 different unit of measurements: px (Absolute style), % (Relative. overriding style) and em (Relative, overriding style) */
  font-size: 10px;
  text-transform: capitalize;
  text-align: center;
}

/* Star element is not inheriting */
/* Star element is used to reset the default browser stylesheet aka user agent stylesheet */
* {
  box-sizing: border-box;
  overflow: auto;
}

body {
  background-color: gray;
  background-image: url("background1.jpg");
  background-repeat: repeat-y;
  background-position: right;
  /* background: gray url("background1.jpg") repeat-y right; */
}

/* Padding Sequence: Top, Right, Bottom, Left */
/* To avoid sizing problems, always use border-box as default */
/* The box-sizing style is by nature not inherited, so you cannot put it in the parent element
A solution to this is to use the Star element, which applies the styles to every element */
/* Cumulative Margins:
When two boxes are places side by side, the left or right margins are independant;
When two boxes are placed on top of each other, the margin between them collapses, and the bigger margin is the eventual one */
#box {
  background-color: blue;
  padding: 5px 5px 5px 5px;
  border: 3px solid black;
  text-align: center;
  margin-bottom: 60px;
  margin-top: 60px;
  width: 850px;
}

#content {
  background-color: #90EE90;
}

#greeting {
  margin-top: 40px;
}

/* Floating Elements (Positioning Scheme) */
/* float removes the element from the document flow and pushes the other elements up according to their margins */
/* The floated element still respects the margins */
/* clear is resuming the document flow */
/* Used to make 2-column pages */
div.affiliates {
  /* background-color: #00FFFF; */
}

div.affiliates p {
  width: 50%;
  height: 50px;
  /* border: 1px solid black; */
  padding: 5px;
  float: left
}

div.affiliates section {
  clear: left;
}

#a1 {
  /* background-color: #A52A2A; */
}

#a2 {
  /* background-color: #DEB887; */
}

#a3 {
  /* background-color: #5F9EA0; */
}

#a4 {
  /* background-color: #FF7F50; */
}

/* Relative Positioning */
/* The original space where the element was does not change and elements around it also does not change */
/* Directions stated in position: relative can be understood by "from" the top, bottom, left, right. To not be confused, use negative values to actually move it in the direction stated */
/* By default, html is the only element that has relative positioning set on it */
h1 {
  position: relative;
  right: -820px;
}

/* Absoulte Positioning */
/* The element is taken out of document flow and elements around it will move assuming the space that the original element was in is now empty */
/* If an absolute element is within a relative element, if the relative element is offset, the absolute element will move along with it */
/* The relative element in this case, also known as the container, needs to have positioning styled, or else it will keep going up the ancestry till it reaches html */
p.footer {
  position: absolute;
  top: 2460px;
}

/* Media Queries */
/* Comma is equivalent to "OR" in media queries */
#Section2 {
  text-align: center;
  background-color: #A52A2A;
  width: 1880px;
  height: 300px;
}

#Section3 {
  text-align: center;
  background-color: #DEB887;
  width: 1880px;
  height: 300px;
}

/* Large Devices only */
@media (min-width: 1200px) {
  #Section2 {
    width: 80%;
  }
  #Section3 {
    width: 150px;
    height: 150px;
  }
}

/* Medium Devices only */
@media (min-width: 992px) and (max-width: 1199px) {
  #Section2 {
    width: 50%;
  }
  #Section3 {
    width: 100px;
    height: 100px;
  }
}

/* With Media Queries, you can solve the problem of website differences between different devices */
/* Responsive Design is introduced, which encapsulates every aspect of how desktop and mobile websites can interact the same way */
/* Most common Responsive Layout is 12-columns as it has a lot of common factors so it is very flexible */
/* Example shown in ResponsiveDesignExample.html */
